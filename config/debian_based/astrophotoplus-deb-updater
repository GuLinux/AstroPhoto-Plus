#!/bin/bash

set -e

RELEASES_URL="https://astrophotoplus.gulinux.net/releases"

get-installed-version() {
    dpkg-query --showformat='${Version}' --show astrophotoplus
}

get-latest-info() {
    curl -L -f -s "$RELEASES_URL"
}

get-latest-deb() {
    dpkg -s python3-requests >/dev/null 2>&1 || sudo apt install -y python3-requests
    python3 - <<EOF
import requests
import json
import sys

def is_compatible_asset(asset):
    return asset['name'].endswith('.deb')

try:
    latest_version = requests.get('$RELEASES_URL')
    latest_version_info = sorted(latest_version.json(), key=lambda r: r['created_at'], reverse=True)[0]
    deb_asset = [asset for asset in latest_version_info['assets'] if is_compatible_asset(asset)]
    print(deb_asset[0]['browser_download_url'])
except Exception as e:
    sys.exit('Error retrieving latest AstroPhoto Plus version: {}\n'.format(e))
EOF
}

needs-update() {
    python3 - <<EOF
current_version = '$( get-installed-version)'

if not current_version:
    raise RuntimeError('Unable to detect installed version')

latest = '$( basename "$1")'

if latest.startswith('AstroPhotoPlus-{}'.format(current_version)):
    print('is_latest')
else:
    print('needs_update')
EOF
}

run-updater() {
    echo "Updating to package $@"
    temp_deb_file="/tmp/$( basename "$1")"
    cd /tmp
    curl -L "$1" -o "$temp_deb_file"
    apt install -y "$temp_deb_file"
    rm -f "$temp_deb_file"
    echo "Your system will now reboot."
    AstroPhotoPlus-ctl restart
}


update() {
    latest_deb="$( get-latest-deb )"
    if [ "$(needs-update "$latest_deb")" == "is_latest" ]; then
        echo "Already at latest version"
    else
        echo "New version found! Updating..."
        run-updater "$latest_deb"
    fi
}

check-update-available() {
    latest_deb="$( get-latest-deb )"
    echo "Latest version: $(basename "$latest_deb" )" >&2
    echo "Current version: $( get-installed-version )" >&2
    if [ "$(needs-update "$latest_deb")" == "is_latest" ]; then
        exit 1
    else
        exit 0
    fi
}

case "$1" in
    update)
        update
        ;;
    get-latest-info)
        get-latest-info
        ;;
    check-update-available)
        check-update-available
        ;;
    *)
        echo "Usage: $0 update|get-latest-info|check-update-available" >&1
        exit 1
        ;;
esac

