#!/usr/bin/env python3
import argparse
import sys
import requests
import shutil
import os
import json
import time

MAX_BUILDS=5

parser = argparse.ArgumentParser(description='Publish CircleCI artifacts as downloadable packages for AstroPhotoPlus.')
parser.add_argument('-n', '--build-number', type=int, help='build number from CircleCI')
parser.add_argument('-d', '--compare-url', type=str, help='Github compare url')
parser.add_argument('-r', '--repository-url', type=str, help='Github repository url')
parser.add_argument('-c', '--commit-id', type=str, help='Commit id')
parser.add_argument('-i', '--rebuild-index', action='store_true', help="Don't fetch artifacts, just rebuild index.html")

args = parser.parse_args()

if not args.rebuild_index and (not args.build_number or not args.compare_url or not args.repository_url or not args.commit_id):
    raise RuntimeError('Required arguments not found')

ci_token = os.environ.get('astrophotoplus_publishing_token')
base = os.environ['astrophotoplus_publishing_path']
builds_path = os.path.join(base, 'builds')


def download_artifact(artifact, dest):
    if not ci_token:
        raise RuntimeError('Missing `astrophotoplus_publishing_token` environment variable')
    url = artifact['url']
    path = artifact['path']
    filename = os.path.basename(path)
    destfile = os.path.join(dest, filename)
    print('downloading {} to {}'.format(url, destfile))
    r = requests.get('{}?circle-token={}'.format(url, ci_token), stream=True)
    if r.status_code == 200:
        with open(destfile, 'wb') as f:
            for chunk in r:
                f.write(chunk)
    else:
        raise RuntimeError(r)

if not args.rebuild_index:
    if not ci_token:
        raise RuntimeError('Missing `astrophotoplus_publishing_token` environment variable')

    dir='{}/ci-{}'.format(builds_path, args.build_number)
    os.makedirs(dir, exist_ok=True)

    artifacts = requests.get('https://circleci.com/api/v1.1/project/github/GuLinux/AstroPhoto-Plus/{}/artifacts?circle-token={}'.format(args.build_number, ci_token)).json()
    print('writing info')
    with open(os.path.join(dir, 'info.json'), 'w') as json_file:
        json.dump({
                'build-number': args.build_number,
                'github-compare-url': args.compare_url,
                'github-repository-url': args.repository_url,
                'commit-id': args.commit_id,
                'build-timestamp': time.time(),
                'artifacts': [os.path.basename(artifact['path']) for artifact in artifacts],
            }, json_file, sort_keys=True, indent=4, separators=(',', ': '))
    print('found {} artifacts'.format(len(artifacts)))

    for artifact in artifacts:
        download_artifact(artifact, dir)




builds = [d for d in os.listdir(builds_path) if d.startswith('ci-')]
builds_sorted = sorted(builds, key=lambda d: int(d.replace('ci-', '')), reverse=True)
newest = builds_sorted[0:MAX_BUILDS]
older = [x for x in builds if x not in newest]
for dir in older:
    print('Removing old directory: {}'.format(dir))
    shutil.rmtree(os.path.join(builds_path, dir), ignore_errors=True)

latest_link = os.path.join(builds_path, 'latest')

try:
    os.remove(latest_link)
except FileNotFoundError:
    pass
os.symlink(newest[0], latest_link)


with open(os.path.join(base, 'default.md'), 'w') as index:
    with open(os.path.join(base, 'default.md.template'), 'r') as template:
        index.write(template.read())
        index.write('\n[ui-accordion open=0]\n')
    for build in newest:
        build_info = None
        try:
            with open(os.path.join(builds_path, build, 'info.json')) as json_file:
                build_info = json.load(json_file)
            print('Creating index entry for {}, info={}'.format(build, build_info))
            build_info['date'] = time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime(build_info['build-timestamp']))
            build_info['path'] = build
            github_commit_info = requests.get('https://api.github.com/repos/GuLinux/AstroPhoto-Plus/commits/{}'.format(build_info['commit-id'])).json()
            build_info['message'] = github_commit_info['commit']['message']

            index.write('''
[ui-accordion-item title="build #{build-number}"]
Commit date: *{date}*  
commit id: [{commit-id}](https://github.com/GuLinux/AstroPhoto-Plus/commit/{commit-id}?target=_blank)    [view diff]({github-compare-url}?target=_blank)  
```
{message}
```  
### Files: \n'''.format(**build_info))
            for artifact in build_info['artifacts']:
                index.write(' - [{name}](https://astrophotoplus.gulinux.net/development-builds/builds/{build}/{name})\n'.format(build=build, name=artifact))
            index.write('[/ui-accordion-item]\n')
        except Exception as e:
            print('Error creating entry for {}: {}'.format(build, repr(e)))

    index.write('[/ui-accordion]-\n')
